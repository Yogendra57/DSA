// Online C compiler to run C program online
#include <stdio.h>
#include<stdlib.h>
struct Node{
    int data;
    struct Node *next;
};
void LinkedListTraversal(struct Node*ptr){
    while(ptr!=NULL){
        printf("Element: %d\n",ptr->data);
        ptr=ptr->next;
    }
}
//Insert Node at First
struct Node * insertAtFirst(struct Node*head,int data){
    struct Node *ptr= (struct Node*)malloc(sizeof(struct Node));
    ptr->data=data;
    ptr->next=head;
   
    return ptr;
}
//Insert Node In Between Two Node in Linked list
struct Node *insertInBetween(struct Node*head,int index,int data){
    struct Node *ptr=(struct Node*)malloc(sizeof(struct Node));
    struct Node* p=head;
    ptr->data=data;
    int i=0;
    while(i!=index){
        p=p->next;
        i++;
    }
    ptr->next=p->next;
    p->next=ptr;
    return head;
    
}
//Insert Node At end of the linked List
struct Node*insertAtEnd(struct Node*head,int data){
    struct Node*ptr=(struct Node*)malloc(sizeof(struct Node));
    struct Node*p=head;
    ptr->data=data;
    while(p->next!=NULL){
        p=p->next;
    }
    p->next=ptr;
    ptr->next=NULL;
    return head;
}
//Insert Node After a Specific Node
struct Node*insertAfterNode(struct Node*prevNode,int data){
    struct Node*ptr=(struct Node*)malloc(sizeof(struct Node));
    ptr->data=data;
    ptr->next=prevNode->next;
    prevNode->next=ptr;
    return prevNode;
    
}

int main() {
    // Write C code here
    printf("Linked List Implementation\n");
    struct Node *head;
    head=(struct Node*)malloc(sizeof(struct Node));
    struct Node *second;
    second=(struct Node*)malloc(sizeof(struct Node));
    struct Node *third;
    third=(struct Node*)malloc(sizeof(struct Node));
    struct Node *fourth;
    fourth=(struct Node*)malloc(sizeof(struct Node));
    //Link first and second Node
    head->data=1;
    head->next=second;
    //Link second and third Node
    second->data=2;
    second->next=third;
    //Link third and fourth Node
    third->data=3;
    third->next=fourth;
    //Terminating List at Fourth Node
    fourth->data=4;
    fourth->next=NULL;
    printf("Linked List without operation\n");
    LinkedListTraversal(head);
    printf("Insert Node at First\n");
    head=insertAtFirst(head,0);
    LinkedListTraversal(head);
    printf("Insert Node after 3rd nodes of the linked list\n");
    head=insertInBetween(head,3,5);
    LinkedListTraversal(head);
    printf("Insert Node at the end of the linked list\n");
    head=insertAtEnd(head,6);
    LinkedListTraversal(head);
    printf("Insert Node after a Specific Node\n");
    head=insertAfterNode(fourth,77);
    LinkedListTraversal(head);
    

    return 0;
}